// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model connected to Clerk authentication
model User {
  id                String              @id // Clerk user ID
  email             String              @unique
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  profile           Profile?
  interestedIpos    UserInterestedIpo[]
  transactions      Transaction[]
  notificationPrefs NotificationPrefs?

  @@index([email])
}

// User profile information
model Profile {
  id               String   @id @default(cuid())
  userId           String   @unique
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  riskTolerance    String?  // Conservative, Moderate, Aggressive
  investmentHorizon String?  // Less than 5 years, 5-10 years, 10+ years
  incomeBracket    String?  // Income bracket for investment recommendations
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  @@index([userId])
}

// IPO data
model Ipo {
  id             String              @id @default(cuid())
  ticker         String              @unique
  name           String
  sector         String
  expectedDate   DateTime
  expectedPriceMin Float
  expectedPriceMax Float
  description    String              @db.Text
  logo           String?
  valuation      Float?
  foundedYear    Int?
  headquarters   String?
  ceo            String?
  employees      Int?
  revenue        Float?
  website        String?
  competitors    String[]
  riskFactors    String[]
  useOfProceeds  String?             @db.Text
  createdAt      DateTime            @default(now())
  updatedAt      DateTime            @updatedAt
  interestedUsers UserInterestedIpo[]

  @@index([ticker])
  @@index([sector])
  @@index([expectedDate])
}

// Relationship between User and IPO with additional data
model UserInterestedIpo {
  id             String    @id @default(cuid())
  userId         String
  ipoId          String
  user           User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  ipo            Ipo       @relation(fields: [ipoId], references: [id], onDelete: Cascade)
  interested     Boolean   @default(true)
  investmentShares Int?
  investmentAmount Float?
  notifyOnDate   Boolean   @default(false)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  @@unique([userId, ipoId])
  @@index([userId])
  @@index([ipoId])
  @@index([interested])
}

// Transaction history
model Transaction {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  ipoId       String?
  type        String   // interest, investment, notification
  action      String
  details     String   @db.Text
  amount      Float?
  shares      Int?
  createdAt   DateTime @default(now())

  @@index([userId])
  @@index([type])
  @@index([createdAt])
}

// User notification preferences
model NotificationPrefs {
  id                String   @id @default(cuid())
  userId            String   @unique
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  emailNotifications Boolean  @default(true)
  pushNotifications  Boolean  @default(false)
  ipoReminders       Boolean  @default(true)
  marketUpdates      Boolean  @default(true)
  portfolioAlerts    Boolean  @default(true)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@index([userId])
}

